---
# Create PostgreSQL databases and users

- name: Performing operations on the primary host
  when: play_instance_is_primary
  block:
    - name: Installing requirements (Debian)
      apt:
        name: python3-psycopg2
        state: present
      when: ansible_facts.os_family == 'Debian'

    - name: Installing requirements (RedHat)
      dnf:
        name: python3-psycopg2
        state: present
      when: ansible_facts.os_family == 'RedHat'

    - name: Creating databases
      become_user: postgres
      community.postgresql.postgresql_db:
        name: "{{ item.name }}"
        login_unix_socket: "{{ play_postgresql_instance_definition.unix_socket_directories | first }}"
        port: "{{ play_postgresql_instance_definition.port }}"
        state: present
      loop: "{{ play_databases_create }}"

    - name: Enabling extensions on databases
      become_user: postgres
      community.postgresql.postgresql_ext:
        db: "{{ item.db }}"
        name: "{{ item.extension }}"
        login_unix_socket: "{{ play_postgresql_instance_definition.unix_socket_directories | first }}"
        port: "{{ play_postgresql_instance_definition.port }}"
        state: present
      loop: "{{ play_db_extensions }}"

    - name: Creating users
      become_user: postgres
      community.postgresql.postgresql_user:
        name: "{{ item.name }}"
        password: "{{ item.password }}"
        db: "{{ item.database | default('postgres') }}"
        role_attr_flags: "{{ item.role_attr_flags | default([]) | join(',') }}"
        login_unix_socket: "{{ play_postgresql_instance_definition.unix_socket_directories | first }}"
        port: "{{ play_postgresql_instance_definition.port }}"
        state: present
        encrypted: yes
      loop: "{{ play_users_create }}"

    - name: Updating users roles
      become_user: postgres
      community.postgresql.postgresql_privs:
        database: "postgres"
        roles: "{{ item.role | default(['PUBLIC']) | join(',') }}"
        privs: "{{ item.privileges | default(['ALL']) | join(',') }}"
        type: "{{ item.type | default('database') }}"
        objs: |-
          {{
            item.objs |
            default(
              ((item.type | default('database')) in ['function', 'partition table']) |
              ternary(['ALL_IN_SCHEMA'], [])
            ) |
            join(',')
          }}
        grant_option: "{{ item.grant_option | default(False) }}"
        login_unix_socket: "{{ play_postgresql_instance_definition.unix_socket_directories | first }}"
        port: "{{ play_postgresql_instance_definition.port }}"
        state: present
      loop: "{{ play_users_privileges }}"