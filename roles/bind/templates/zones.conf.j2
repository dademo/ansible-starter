{#- vim: set tabstop=2 shiftwidth=2 expandtab filetype=jinja2 : #}
# Generated by Ansible on {{ '%Y-%m-%d %H:%M:%S' | strftime }}
{% for zone_def in ([play_host_zone_def] + play_bind.zones | default([])) %}

{%-   set _zone_type = zone_def.type | default(play_bind.primary | ternary('primary', 'secondary')) -%}
{#-   We will list all primary and secondary hosts -#}
{%-   set _primary_hosts = [] -%}
{%-   set _secondary_hosts = [] -%}
{%-   for _play_host in ansible_play_hosts_all -%}
{%-     set _play_host_bind = hostvars[_play_host]['bind'] | combine(hostvars[_play_host]['host_bind'] | default({})) -%}
{%-     set _play_host_zone_def = hostvars[_play_host]['bind']['zones'][zone_def.zone] | default({}) -%}
{%-     set _play_host_zone_kind = _play_host_zone_def.type | default(_play_host_bind.primary | ternary('primary', 'secondary')) -%}
{%-     if _play_host_zone_kind == 'primary' -%}
{#-       We will get its IP and add it to the allow list -#}

{{-       _primary_hosts.append(hostvars[_play_host]['ansible_default_ipv4']['address']) -}}
{%-     endif -%}
{%-     if _play_host_zone_kind == 'secondary' -%}
{#-       We will get its IP and add it to the allow list -#}
{{-       _secondary_hosts.append(hostvars[_play_host]['ansible_default_ipv4']['address']) -}}
{%-     endif -%}
{%-   endfor %}

zone "{{ zone_def.zone }}" {
  type {{ _zone_type }};
  file "{{ bind_config_dir }}/db.{{ zone_def.zone }}";
{%  if _zone_type == 'primary' %}
  notify yes;
  allow-transfer {
{%    for _secondary_host in _secondary_hosts %}
    {{ _secondary_host }};
{%    endfor %}
  };
{% else %}
  primaries {
{%    for _primary_host in _primary_hosts %}
    {{ _primary_host }};
{%    endfor %}
  };
{%  endif %}
{%  if zone_def.allow_query is defined and not _zone_type == 'primary' %}
  allow-query {
{%    for allowed_source in zone_def.allow_query %}
    {{ allowed_source }};
{%    endfor %}
  };
{%  endif %}
{%  if zone_def.customs is defined %}
  {{ zone_def.customs | indent(2) }}
{%  endif %}
};
{% if zone_def.reverse | default(False) %}
{%- set _reverse_zone_network = (
                                  (
                                    zone_def.network |
                                    ansible.netcommon.ipaddr('network')
                                  ).split('.') |
                                  list
                                )[
                                  0
                                  :
                                  (
                                    (zone_def.network | ansible.netcommon.ipaddr('prefix') / 8) |
                                    round(method='ceil')                                        |
                                    int
                                  )
                                ]         |
                                reverse   |
                                join('.')
%}

zone "{{ _reverse_zone_network }}.in-addr.arpa" {
  type {{ _zone_type }};
  file "{{ bind_config_dir }}/db.{{ zone_def.zone }}.inv";
{%  if _zone_type == 'primary' %}
  notify yes;
  allow-transfer {
{%    for _secondary_host in _secondary_hosts %}
    {{ _secondary_host }};
{%    endfor %}
  };
{% else %}
  primaries {
{%    for _primary_host in _primary_hosts %}
    {{ _primary_host }};
{%    endfor %}
  };
{%  endif %}
{%  if zone_def.allow_reverse_query is defined and not _zone_type == 'primary' %}
  allow-query {
{%    for allowed_source in zone_def.allow_reverse_query %}
    {{ allowed_source }};
{%    endfor %}
  };
{%  endif %}
{%  if zone_def.customs_inv is defined %}
  {{ zone_def.customs | indent(2) }}
{%  endif %}
};
{%  endif %}
{% endfor %}
