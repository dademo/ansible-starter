---
# tasks file for bind
- name: Setting facts (1/2)
  set_fact:
    play_bind: "{{ bind | combine(host_bind | default({})) }}"
    play_secondary_hosts: |-
      {%- set _secondary_hosts = [] -%}
      {%- for _play_host in ansible_play_hosts_all -%}
      {%-   set _play_host_play_bind = hostvars[_play_host]['bind'] |
                                        combine(hostvars[_play_host]['host_bind'] | default({}))
      -%}
      {%-   if not _play_host_play_bind.primary | default(False) -%}
      {{-     _secondary_hosts.append(hostvars[_play_host]['ansible_facts']['default_ipv4']['address']) -}}
      {%-   endif -%}
      {%- endfor -%}
      {{- _secondary_hosts -}}

    host_zone_default_primary_dns: |-
      {%- set _primary_hosts = [] -%}
      {%- for _play_host in ansible_play_hosts_all -%}
      {%-   set _play_host_play_bind = hostvars[_play_host]['bind'] |
                                        combine(hostvars[_play_host]['host_bind'] | default({}))
      -%}
      {%-   if _play_host_play_bind.primary | default(False) -%}
      {{-     _primary_hosts.append(hostvars[_play_host]['inventory_hostname']) -}}
      {%-   endif -%}
      {%- endfor -%}
      {{- _primary_hosts | first -}}
    _host_zone_entries: |-
      {%- set _entries = [] -%}
      {%- for _play_host in groups['all'] -%}
      {%-   if hostvars[_play_host]['ansible_host'] | ansible.netcommon.ipv4 %}
      {%-     set _ip = hostvars[_play_host]['ansible_host'] -%}
      {%-   else -%}
      {%-     set _ip = lookup('dig', hostvars[_play_host]['ansible_host']) -%}
      {%-   endif %}
      {#- Only resolvable names -#}
      {%- if _ip | ansible.netcommon.ipv4 %}
      {{-   _entries.append({
          'name': hostvars[_play_host]['inventory_hostname'] + '.',
          'type': 'A',
          'target': _ip,
        })
      -}}
      {%-   endif %}
      {%- endfor -%}
      {{ _entries }}

- name: Setting facts (2/2)
  set_fact:
    play_host_zone_def:
      zone: "{{ play_bind.host_zone.zone }}"
      entries: "{{ _host_zone_entries }}"
      type: "{{ play_bind.primary | ternary('primary', 'secondary') }}"
      reverse: "{{ play_bind.host_zone.reverse | default(False) }}"
      allow_query: "{{ play_bind.host_zone.allow_query | default([]) }}"
      allow_reverse_query: "{{ play_bind.host_zone.allow_query | default([]) }}"
      network: "{{ play_bind.host_zone.network | default('0.0.0.0/1') }}"
      TTL: "{{ play_bind.host_zone.TTL | default(3600) }}"
      admin: "{{ play_bind.host_zone.admin | default('admin.' + play_bind.host_zone.zone) }}"
      primary_dns_name: "{{ host_zone_default_primary_dns }}."
      refresh: "{{ play_bind.host_zone.refresh | default(play_bind.host_zone.TTL | default(3600)) }}"
      retry: "{{ play_bind.host_zone.retry | default((play_bind.host_zone.TTL | default(3600)) / 10) }}"
      expire: "{{ play_bind.host_zone.expire | default(play_bind.host_zone.TTL | default(3600)) }}"
      negative_cache_ttl: "{{ play_bind.host_zone.negative_cache_ttl | default((play_bind.host_zone.TTL | default(3600)) / 10) }}"

- name: Checking values
  ansible.utils.validate:
    data: "{{ play_bind }}"
    criteria: "{{ lookup('file', 'bind.schema.json') }}"
    engine: 'ansible.utils.jsonschema'
  register: validation_errors

- name: Installing software
  include_tasks: "setup/{{ ansible_facts.os_family | lower }}.yaml"

- name: Updating service facts
  service_facts: {}

# Managed in shared role
#- name: Opening port in firewalld
#  ansible.posix.firewalld:
#    port: "{{ item }}"
#    state: enabled
#    immediate: yes
#    permanent: yes
#  loop:
#    - 53/tcp
#    - 53/udp
#  loop_control:
#    label: "Opening port {{ item }}"
#  when:
#    - "'firewalld.service' in ansible_facts['services']"
#    - "ansible_facts['services']['firewalld.service']['state'] == 'running'"

- name: Allowing zone update
  ansible.posix.seboolean:
    name: named_write_master_zones
    persistent: yes
    state: yes
  when:
    - not play_bind.primary | default(False)
    - "ansible_facts.os_family != 'Debian' or ansible_facts.selinux.status == 'enabled'"

- name: Configuring Bind
  include_tasks: "config/{{ ansible_facts.os_family | lower }}.yaml"

- name: Checking if bind config is correct
  command: named-checkconf -lc
  register: bind_config_test

- name: Making the service up
  block:
    - name: About zones
      debug:
        msg: |-
          Zones created :
          {% for zone in bind_config_test.stdout_lines %}
            - {{ zone }}
          {% endfor %}
    - name: Starting Bind
      systemd:
        name: "{{ bind_software_name }}"
        state: restarted
      when: bind_install.changed
    - name: Ensure Bind is started
      systemd:
        name: "{{ bind_software_name }}"
        state: started
    - name: Reload Bind
      systemd:
        name: "{{ bind_software_name }}"
        state: reloaded
        enabled: yes
      when: not bind_install.changed
  when:
    - not bind_config_test.skipped | default(False)
    - bind_config_test.rc == 0

- name: Failure
  fail:
    msg: |-
      Bind config is invalid :
        {{ bind_config_test.stdout | indent(2) }}
  when:
    - not bind_config_test.skipped | default(False)
    - bind_config_test.rc != 0

